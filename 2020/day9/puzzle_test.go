package day9

import "testing"

const (
	set0 = "35\n20\n15\n25\n47\n40\n62\n55\n65\n95\n102\n117\n150\n182\n127\n219\n299\n277\n309\n576"
	set1 = "33\n38\n29\n45\n26\n35\n14\n5\n27\n44\n18\n8\n7\n23\n16\n10\n41\n21\n9\n30\n17\n42\n25\n31\n20\n12\n59\n13\n22\n40\n15\n47\n14\n33\n26\n19\n24\n49\n27\n28\n23\n29\n32\n21\n34\n30\n35\n36\n48\n55\n50\n37\n58\n38\n39\n43\n41\n45\n40\n98\n78\n57\n79\n44\n49\n51\n71\n106\n87\n66\n65\n72\n73\n124\n113\n75\n118\n77\n80\n81\n83\n130\n138\n84\n122\n117\n101\n93\n110\n147\n126\n150\n148\n190\n159\n137\n145\n152\n340\n194\n273\n157\n158\n176\n184\n177\n296\n185\n286\n203\n310\n211\n269\n247\n263\n271\n477\n282\n289\n294\n297\n302\n309\n473\n315\n333\n487\n645\n361\n467\n652\n454\n396\n497\n598\n458\n760\n510\n518\n534\n553\n586\n571\n1120\n1132\n868\n1006\n624\n648\n676\n694\n1048\n1095\n757\n906\n850\n854\n1604\n955\n976\n1096\n1228\n1028\n1529\n1762\n1139\n1318\n1421\n1554\n1272\n1300\n1381\n1324\n1342\n2224\n2276\n2409\n3548\n1607\n1704\n1805\n1809\n1983\n2560\n2294\n2167\n2256\n3311\n2411\n2693\n2618\n2572\n2624\n4005\n2596\n2642\n2666\n4264\n2949\n5478\n3412\n3509\n3416\n3513\n4065\n3614\n3976\n4150\n6572\n4461\n4578\n4667\n4983\n5007\n5168\n7417\n9168\n8621\n6054\n5238\n5308\n8821\n8240\n6361\n9561\n6828\n12390\n6929\n9072\n7590\n8075\n8126\n9816\n9039\n9128\n9674\n9650\n18729\n17558\n13778\n16315\n12237\n11669\n10546\n16502\n12136\n19795\n15956\n13290\n13757\n14418\n14519\n15004\n16629\n17203\n17891\n18802\n28476\n25065\n28297\n19324\n21319\n25994\n27047\n40643\n22215\n22682\n36693\n23836\n31633\n25426\n33552\n34328\n27708\n33321\n28937\n31148\n53541\n61758\n51158\n37215\n42638\n41539\n42006\n43534\n43160\n76223\n81249\n44897\n46518\n46051\n48108\n49262\n51544\n53134\n54363\n64700\n56645\n58856\n84689\n68363\n72687\n88431\n82112\n89211\n78754\n83545\n84699\n85166\n86694\n97523\n142401\n90948\n91415\n104753\n94159\n131543\n100806\n151441\n122726\n177642\n145856\n127219\n143555\n150475\n141050\n176277\n167185\n205973\n162299\n163920\n168244\n323498\n180853\n209420\n234503\n182363\n185107\n218634\n198912\n244361\n249945\n305089\n352292\n321638\n294404\n268269\n369109\n284605\n291525\n317327\n367156\n331105\n326219\n330543\n346283\n478864\n363216\n379765\n381275\n367470\n384019\n403741\n719762\n443273\n628380\n518214\n598812\n693689\n559794\n552874\n695328\n576130\n601932\n697699\n643546\n747235\n656762\n710308\n761040\n709499\n1458739\n730686\n1111961\n748745\n751489\n787760\n1078008\n1377125\n961487\n1071088\n1471348\n1269293\n1246563\n1112668\n1311431\n1219676\n1178062\n1353045\n1300308\n1353854\n1366261\n2096947\n1419807\n1440185\n1458244\n1479431\n1801774\n1500234\n2489493\n1749247\n1858848\n2845692\n2181163\n2032575\n2183756\n2290730\n2332344\n2478370\n2397738\n2519984\n3644584\n2531107\n2653353\n3844631\n2786068\n2859992\n3249481\n3241959\n2898429\n5647219\n3338279\n4269231\n4216331\n3930410\n4563682\n3891423\n4213738\n4323305\n4364919\n4474486\n4769100\n4852328\n6035549\n5183806\n5391099\n5429536\n5184460\n5439421\n9880180\n5646060\n5758421\n6140388\n6236708\n6789852\n7229702\n7268689\n8253715\n9904022\n7821833\n8105161\n13409077\n8982838\n14140710\n8839405\n10830520\n9621428\n10887877\n15050964\n12698225\n17067228\n10613996\n15051535\n15319601\n14058541\n11404481\n17172711\n13026560\n13466410\n23890940\n14498391\n18099209\n17236553\n15926994\n31508286\n45648996\n19727282\n21501873\n19453401\n29109505\n20235424\n25938841\n22018477\n25112387\n23640556\n24080406\n24431041\n24870891\n25463022\n25902872\n27331475\n26492970\n34968283\n33701834\n30425385\n40437232\n33163547\n36963835\n35380395\n27911108\n39180683\n39688825\n51991514\n50575409\n42253901\n43875980\n49103578\n45659033\n60194804\n51551664\n50573376\n63588932\n62866707\n51365894\n52395842\n53824445\n61873365\n58336493\n93619795\n61074655\n91500040\n63291503\n67599933\n104127266\n67091791\n142073416\n118643455\n86129881\n145171459\n145324485\n89535013\n107440071\n113239259\n108909869\n103947506\n114162308\n117413377\n103761736\n169984524\n106220287\n205364919\n119411148\n193569952\n185013310\n124366158\n262737862\n226851219\n134691724\n153221672\n170853527\n189891617\n205541029\n175664894\n193296749\n254234354\n208946161\n278293598\n209982023\n207709242\n381205923\n254102872\n252105101\n225631435\n230586445\n240912011\n243777306\n386796825\n379799688\n277587830\n383374136\n324075199\n287913396\n388794596\n328886566\n346518421\n418928184\n368961643\n417691265\n542016268\n416655403\n531690702\n433340677\n440568468\n438295687\n685445778\n471498456\n456217880\n612428260\n521365136\n484689317\n632571902\n565501226\n708686254\n606474396\n611988595\n717681162\n676707992\n982156629\n675404987\n715480064\n785617046\n888153859\n961933604\n1218724260\n849996080\n1052996728\n896786348\n1006054453\n977583016\n1146903443\n940907197\n1202370479\n1127839532\n1117261219\n1050190543\n1494628255\n1171975622\n1218462991\n1397605641\n1723735615\n1352112979\n1390885051\n2035153357\n1900186623\n1501097110\n1949783076\n1738149939\n1811929684\n1790903277\n2719560101\n1946976891\n2929190903\n2133893985\n1918490213\n3285531532\n2940520418\n2167451762\n2855411158\n2544818798\n4292633397\n2390438613\n4220657211\n2853210089\n2742998030\n3958355039\n4045915908\n2891982161\n3239247049\n3292000387\n3761712760\n4593561097\n3529053216\n3602832961\n3709393490\n3865467104\n4661488243\n4052384198\n7459904260\n4712270560\n7567681718\n6963655241\n4557890375\n4935257411\n5133436643\n5243648702\n8086943591\n5596208119\n5634980191\n5982245079\n6131229210\n6183982548\n6421035377\n6531247436\n7001393877\n7290765976\n9726997740\n7238446706\n8842830133\n7574860594\n7917851302\n8610274573\n8764654758\n10570237602\n9801539077\n9493147786\n9691327018\n16760681435\n11115681722\n11231188310\n10839856821\n11578453198\n17097926801\n11617225270\n12113474289\n21379992275\n14449098738\n12952282813\n13532641313\n16003101464\n14529212682\n19153313792\n14813307300\n24183471123\n15492711896\n16528125875\n18257802544\n18455981776\n19184474804\n24250637815\n20531183839\n20922515328\n33602412530\n24569508083\n22071045131\n23691927487\n23195678468\n23730699559\n28145351145\n40258825434\n27981740051\n34980282577\n26484924126\n43025489859\n29342519982\n34646025688\n30306019196\n34677186700\n40711596998\n59443300238\n47981337374\n46640553214\n37640456580\n44614442815\n48904255379\n41453699167\n42993560459\n45266723599\n45762972618\n45801744690\n46887605955\n83442201270\n50215623685\n86068141982\n57324260033\n56790943322\n55827444108\n113151704141\n72368009841\n105245044928\n64952044884\n74920462011\n72317643280\n78352053578\n89634113673\n79094155747\n80634017039\n82254899395\n84447259626\n86720422766\n87216671785\n97103229640\n91029696217\n91564717308\n92689350645\n163347339497\n106043067793\n114115203355\n186432846635\n112618387430\n138082343503\n120779488992\n137320054725\n242565099653\n163541415373\n137269688164\n147238105291\n150669696858\n157446209325\n159728172786\n161349055142\n177737246679\n173819616703\n171663931411\n308115906183\n273843376141\n182594413525\n184254067953\n197607785101\n205307738075\n249888075594\n218661455223\n226733590785\n305033556945\n233397876422\n271449185850\n426819167606\n274589742889\n408718874014\n342577426239\n503926481381\n308587160433\n451580622820\n466382612087\n387902151600\n333012986553\n345483548114\n354258344936\n638046543498\n415992289947\n381861853054\n366848481478\n389561806028\n416269240324\n656888360895\n501323333674\n445395046008\n855944418115\n504847062272\n604462172403\n732139232267\n920839352219\n696489312033\n675435641911\n641600146986\n820640957023\n678496534667\n846806881788\n687271331489\n743820150964\n921116302596\n771423659082\n834956852036\n748710334532\n1049857218411\n798131093378\n950242108280\n1467912971115\n861664286332\n1189215196972\n1132666377497\n1109309234675\n1146447209258\n1180282704183\n1353172506935\n1503264433318\n1374985846700\n1317035788897\n1320096681653\n1328871478475\n1365767866156\n1797048990068\n1917870868340\n1431091482453\n1520133993614\n1546841427910\n1569554752460\n1583667186568\n3037467723575\n1811906394612\n2059551342955\n2685864547809\n1970973521007\n1994330663829\n3629106095415\n2241975612172\n2462481741610\n3562815776273\n2727124132093\n5499949465185\n3237967549993\n2886590541357\n2648968160128\n2951225476067\n2977932910363\n2796859348609\n3000646234913\n4274388136222\n3579685336569\n3332040388226\n3116396180370\n3871457737567\n3395573581180\n6369508111801\n3782879915619\n3965304184836\n4212949133179\n4791190012438\n5700449291603\n8354005788711\n5678349608160\n5111449901738\n5376092292221\n5445827508737\n5535558701485\n5600193636195\n5774792258972\n5626901070491\n7178453496799\n5797505583522\n8841401089917\n6117042415283\n9498358808058\n7907586192808\n6448436568596\n6511969761550\n7360877766016\n11303159773988\n8574069928057\n9987741392151\n10647008603223\n14616193348889\n11795392023443\n10487542193959\n10557277410475\n10738350972229\n16513143231201\n12223228827568\n11894264077333\n16010328569608\n11374985895167\n11401693329463\n11424406654013\n11914547998805\n13158383349538\n12565478983879\n18243828592039\n27816303005189\n12960406330146\n15022506496653\n18099228738245\n21362727287318\n18561811320208\n20468334005390\n21385359575452\n21044819604434\n21225893166188\n27914836560664\n21295628382704\n21932263305642\n30785040147776\n22776679224630\n33608588403020\n26397492391820\n41338490544838\n56360997041491\n47442311996254\n42680987958156\n24480026982684\n27982912826799\n34186299496334\n33584317816861\n46544724147007\n31059635068391\n33121735234898\n36661040058453\n40494074625850\n57705859662887\n41513153609824\n42270712770622\n42340447987138\n44708942530272\n43227891688346\n44072307607334\n59519227626718\n75392448005520\n47256706207314\n50877519374504\n52462939809483\n66750739753306\n87936834218618\n97422243521511\n85063818870838\n55539662051075\n79001488045591\n74680374122184\n69782775293351\n64181370303289\n102796368258389\n88661397285973\n156941471148229\n82007228235674\n83783866380446\n83853601596962\n84611160757760\n87300199295680\n132009141825952\n153636376890313\n91329013814648\n178188816263909\n116644310112772"
)

func TestFindFirstNonXMAS(t *testing.T) {
	type args struct {
		xmas       []int
		windowSize int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "example",
			args: args{
				xmas:       MustParseInts(set0),
				windowSize: 5,
			},
			want: 127,
		},

		{
			name: "actual puzzle",
			args: args{
				xmas:       MustParseInts(set1),
				windowSize: 25,
			},
			want: 27911108,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := FindFirstNonXMAS(tt.args.xmas, tt.args.windowSize); got != tt.want {
				t.Errorf("FindFirstNonXMAS() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestFindFirstContiguous(t *testing.T) {
	type args struct {
		xmas   []int
		target int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "example",
			args: args{
				xmas:   MustParseInts(set0),
				target: 127,
			},
			want: 62,
		},

		{
			name: "actual puzzle",
			args: args{
				xmas:   MustParseInts(set1),
				target: 27911108,
			},
			want: 4023754,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := FindFirstContiguous(tt.args.xmas, tt.args.target); got != tt.want {
				t.Errorf("FindFirstContiguous() = %v, want %v", got, tt.want)
			}
		})
	}
}
